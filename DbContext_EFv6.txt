// Choose one:

#define AppConfigConnectionString
//#define EmbeddedConnectionString
//#define NpgsqlConfiguration

// This file has your ConnectionString! -> "@Model.ConnectionString"

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

namespace @Model.Namespace {
@Each.EntityContainer
#if NpgsqlConfiguration
  [DbConfigurationType(typeof(NpgsqlConfiguration))]
#endif
  public class @Current.Name : DbContext {
#if AppConfigConnectionString
    public @Current.Name(): base("name=@Current.Name") {
    
    }
    
    // <connectionStrings>
    //   <add name="@Current.Name" connectionString="@Model.ConnectionString" providerName="@Model.ProviderName" />
    // </connectionStrings>
#endif

#if EmbeddedConnectionString
    public @Current.Name()
        : base(DBUt.Connect(), true) {

    }

    static class DBUt {
        internal static System.Data.Common.DbConnection Connect() {
            var db = System.Data.Common.DbProviderFactories.GetFactory("@Model.ProviderName").CreateConnection();
            db.ConnectionString = "@Model.ConnectionString";
            return db;
        }
    }
#endif

#if NpgsqlConfiguration
    public @Current.Name(String connectionString): base(connectionString) {

    }
    
    // using (var ctx = new @Current.Name("@Model.ConnectionString")) {
    //   Console.WriteLine(ctx.Table.ToArray());
    // }
#endif

    protected override void OnModelCreating(DbModelBuilder modelBuilder) {
      throw new UnintentionalCodeFirstException();
    }

@Each.EntitySet
    public virtual DbSet<@Current.EntityType.Name> @Current.Name { get; set; }
@EndEach
  }

@Each.EntitySet
  [Table("@Current.Ssdl.StoreEntitySet", Schema = "@Current.Ssdl.Schema")]
  public class @Current.Name {
    public @Current.Name() {
@Each.EntityType.NavigationProperty
@If.FromRole.Many
      this.@Current.Name = new HashSet<@Current.ToRole.Type>();
@EndIf
@EndEach

    }

@Each.EntityType.Property
@If.Key.IsKey
    [Key]
@EndIf
    [Column("@Current.Ssdl.Name", Order = @Current.Order)]
    public @Current.TypeSigned @Current.Name { get; set; }

@EndEach
@Each.EntityType.NavigationProperty
@If.FromRole.Many
    public virtual ICollection<@Current.ToRole.Type> @Current.Name { get; set; }
@EndIf
@IfNot.FromRole.Many
    public virtual @Current.ToRole.Type @Current.Name { get; set; }
@EndIf
@EndEach
  }

@EndEach
@EndEach

#if NpgsqlConfiguration
  class NpgsqlConfiguration : System.Data.Entity.DbConfiguration
  {
      public NpgsqlConfiguration()
      {
          SetProviderServices("Npgsql", Npgsql.NpgsqlServices.Instance);
          SetProviderFactory("Npgsql", Npgsql.NpgsqlFactory.Instance);
          SetDefaultConnectionFactory(new Npgsql.NpgsqlConnectionFactory());
      }
  }
#endif
}