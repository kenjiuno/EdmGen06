using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

namespace @Model.Namespace {
@Each.EntityContainer
  public class @Current.Name : DbContext {
    public @Current.Name()
        : base(DBUt.Connect(), true) {

    }

    static class DBUt {
        internal static String ConnectionString {
            get {
                return "@Model.ConnectionString";
            }
        }
    
        internal static System.Data.Common.DbConnection Connect() {
            var db = System.Data.Common.DbProviderFactories.GetFactory("@Model.ProviderName").CreateConnection();
            db.ConnectionString = ConnectionString;
            return db;
        }
    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder) {
      throw new UnintentionalCodeFirstException();
    }

@Each.EntitySet
    public virtual DbSet<@Current.EntityType.Name> @Current.Name { get; set; }
@EndEach
  }

@Each.EntitySet
  [Table("@Current.Ssdl.StoreEntitySet", Schema = "@Current.Ssdl.Schema")]
  public class @Current.Name {
    public @Current.Name() {
@Each.EntityType.NavigationProperty
@If.FromRole.Many
      this.@Current.Name = new HashSet<@Current.ToRole.Type>();
@EndIf
@EndEach

    }

@Each.EntityType.Property
@If.Key.IsKey
    [Key]
@EndIf
    [Column("@Current.Ssdl.Name", Order = @Current.Order)]
    public @Current.TypeSigned @Current.Name { get; set; }

@EndEach
@Each.EntityType.NavigationProperty
@If.FromRole.Many
    public virtual ICollection<@Current.ToRole.Type> @Current.Name { get; set; }
@EndIf
@IfNot.FromRole.Many
    public virtual @Current.ToRole.Type @Current.Name { get; set; }
@EndIf
@EndEach
  }

@EndEach
@EndEach
}